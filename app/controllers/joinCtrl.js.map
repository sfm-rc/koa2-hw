{"version":3,"sources":["../../src/controllers/joinCtrl.js"],"names":[],"mappings":"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","file":"joinCtrl.js","sourcesContent":["import { query } from '../models/db_connection'\r\nimport { pagination, getLinuxTimeStamp } from '../uitil'\r\n\r\n/**\r\n * 报名\r\n * @param {*} ctx\r\n * @param {*} next\r\n */\r\nconst join = async (ctx, next) => {\r\n  const params = ctx.request.body\r\n  const {user_name, user_name_alias, sex, mobile, down_payment, activity_id, extra} = params\r\n  // ---\r\n  await query('set autocommit=0;')\r\n  await query('begin;')\r\n  try {\r\n    const joinUser = await query('select count(*) as count from hw_join where activity_id=? and mobile=?', [activity_id, mobile])\r\n    console.log('joinUser---', joinUser)\r\n    if (joinUser[0].count > 0) {\r\n      x.body = {code: 110, message: '您已经报过名', data: {}}\r\n    }\r\n    else {\r\n      console.info('lock for activity_id', activity_id)\r\n      const activities = await query('select * from hw_activity where id=? for update;', [activity_id])// activity_id这行加了行锁\r\n      const activity = activities[0]\r\n      if (activity.cur_num < activity.limit_num) {\r\n        // 可以报名\r\n        const sql = `INSERT into hw_join VALUES(\r\n                NULL,'${user_name}', '${user_name_alias}', '${sex}', '${mobile}', \r\n                '${down_payment}', '${extra}', '${activity_id}', '${getLinuxTimeStamp()}'\r\n            )`\r\n        var data = await query(sql)\r\n        console.log('insert hw_join for join', data)\r\n        if (data.insertId > 0) {\r\n          const update_res = await query('UPDATE hw_activity set cur_num=cur_num+1 WHERE id=?', [activity_id])\r\n          console.log('update set ++1', update_res)\r\n          ctx.body = {code: 0, message: '报名成功', data}\r\n        }\r\n      }\r\n      else {\r\n        ctx.body = {code: 110, message: '报名失败,活动人数受限制', data: {}}\r\n      }\r\n    }\r\n  }\r\n  catch (error) {\r\n    console.error('join fail', error)\r\n    await query('ROLLBACK')\r\n    ctx.body = {code: 110, message: '报名失败,未知异常', data: {}}\r\n  }\r\n  await query('commit;')\r\n\r\n  console.info('ulock for activity_id', activity_id)\r\n  // ---\r\n}\r\n\r\n/**\r\n * 获取报名表\r\n * @param {*} ctx\r\n * @param {*} next\r\n */\r\nconst list = async (ctx, next) => {\r\n  const params = ctx.request.body\r\n  const {pageIndex, limit, activity_id} = params\r\n  const sql = `select * from hw_join where \r\n    activity_id='${activity_id}' limit ${(pageIndex - 1) * limit}, ${limit}`\r\n  const c_sql = `select count(*) as count from hw_join where \r\n    activity_id='${activity_id}'`\r\n  let data = await query(sql)\r\n  const count = (await query(c_sql))[0].count\r\n  ctx.body = Object.assign(\r\n    {code: 0, message: 'success', data},\r\n    pagination(limit, pageIndex, count)\r\n  )\r\n}\r\n\r\n/**\r\n * 获取活动报名列表,管理后台使用\r\n * @param {*} ctx\r\n * @param {*} next\r\n */\r\nconst list_search = async (ctx, next) => {\r\n  const params = ctx.request.body\r\n  const {admin_id, activity_id, user_name, user_name_alias, mobile, limit, pageIndex} = params\r\n  const where = {}\r\n  if (activity_id) {\r\n    where['activity_id'] = activity_id\r\n  }\r\n\r\n  if (user_name) {\r\n    where['user_name'] = user_name\r\n  }\r\n\r\n  if (user_name_alias) {\r\n    where['user_name'] = user_name\r\n  }\r\n\r\n  if (mobile) {\r\n    where['mobile'] = mobile\r\n  }\r\n\r\n  let where_sql = ''\r\n  let first = true\r\n  for (let item in where) {\r\n    const value = where[item]\r\n    if (first) {\r\n      where_sql = `where ${item} like \"%${value}%\"`\r\n      first = false\r\n    }\r\n    else {\r\n      where_sql = `${where_sql} and ${item} like \"%${value}%\"`\r\n    }\r\n  }\r\n\r\n  let activities = []\r\n  if (admin_id && admin_id != 0) {\r\n    activities = await query(`select id from hw_activity where admin_id=${admin_id}`)\r\n    activities = activities.map(item => item.id)\r\n    console.log('activities', activities)\r\n    if (activities.length == 0) {\r\n      activities = 0;\r\n    }\r\n    console.log('-----', activities);\r\n    if (first) {\r\n      where_sql = `where activity_id in (${activities})`\r\n      first = false\r\n    }\r\n    else {\r\n      where_sql = `${where_sql} and activity_id in (${activities})`\r\n    }\r\n  }\r\n\r\n  const sql = `select A.*, B.title from hw_join as A join hw_activity as B \r\n    on A.activity_id=B.id ${where_sql} limit ${(pageIndex - 1) * limit},${limit}`\r\n\r\n  console.log('join_list_search_sql:', sql)\r\n  let data = await query(sql)\r\n  for (let item in data){\r\n    let ziliao = await query(`select * from hw_insurance where activity_id=? and mobile=?`, [item.activity_id, item.mobile]);\r\n    data[item].isZiliao = ziliao.length === 0 ? 0 : 1;\r\n  }\r\n  let count = await query(`select count(*) as count from hw_join ${where_sql}`)\r\n\r\n  ctx.body = Object.assign({code: 0, message: 'success', 'data': data}, pagination(limit, pageIndex, count[0].count))\r\n}\r\n\r\nexport default {\r\n  join,\r\n  list,\r\n  list_search\r\n}\r\n"]}